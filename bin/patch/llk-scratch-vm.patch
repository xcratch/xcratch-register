diff --git a/src/extension-support/extension-manager.js b/src/extension-support/extension-manager.js
index 7cb556c5..82e65c01 100644
--- a/src/extension-support/extension-manager.js
+++ b/src/extension-support/extension-manager.js
@@ -155,6 +155,16 @@ class ExtensionManager {
             return Promise.resolve();
         }
 
+        const builtinClassFunc = Object.values(builtinExtensions)
+            .find(blockClassFunc => blockClassFunc().extensionURL === extensionURL);
+        if (builtinClassFunc) {
+            const blockClass = builtinClassFunc();
+            const block = new blockClass(this.runtime);
+            const serviceName = this._registerInternalExtension(block);
+            this._loadedExtensions.set(blockClass.EXTENSION_ID, serviceName);
+            return Promise.resolve();
+        }
+
         return new Promise((resolve, reject) => {
             // If we `require` this at the global level it breaks non-webpack targets, including tests
             const ExtensionWorker = require('worker-loader?name=extension-worker.js!./extension-worker');
diff --git a/src/virtual-machine.js b/src/virtual-machine.js
index 131c421c..976bdbc2 100644
--- a/src/virtual-machine.js
+++ b/src/virtual-machine.js
@@ -52,6 +52,8 @@ class VirtualMachine extends EventEmitter {
          * @type {!Runtime}
          */
         this.runtime = new Runtime();
+        this.runtime.formatMessage = formatMessage; // allow extensions to access formatMessage
+        this.runtime.vm = this; // allow extensions to access the VirtualMachine
         centralDispatch.setService('runtime', this.runtime).catch(e => {
             log.error(`Failed to register runtime service: ${JSON.stringify(e)}`);
         });
